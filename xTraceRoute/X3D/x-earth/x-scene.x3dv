#X3D V3.3 utf8

PROTO Location [
   inputOutput SFBool     animate FALSE
   inputOutput SFFloat    latitude 0
   inputOutput SFFloat    longitude 0
   inputOutput SFVec3f    scale 0.01 0.01 0.01
   inputOutput SFRotation orientation 0 0 1 0
   inputOutput MFString   city [ ]
]
{
   Group {
      children [
         DEF Transform Transform {
            scale IS scale
            children [
               DEF TouchGroup Group {
                  children [
                     DEF Touch TouchSensor { }
                     DEF Sphere Transform {
                        children [
                           Shape {
                              appearance Appearance {
                                 material Material {
                                    ambientIntensity 0.712006
                                    diffuseColor 1 0.4 1
                                    specularColor 1 0.3 1
                                    shininess 0.81
                                 }
                              }
                              geometry Sphere { }
                           }
                           DEF Hidden Transform {
                              translation 0 0 0.01
                              children Shape {
                                 appearance Appearance {
                                    material Material {
                                       transparency 1
                                    }
                                 }
                                 geometry Disk2D {
                                    innerRadius 0
                                    outerRadius 2
                                 }
                              }
                           }
                        ]
                     }
                  ]
               }
               DEF PulsingPoint Switch {
                  whichChoice 0
                  children [
                     Shape {
                        appearance Appearance {
                           material Material {
                              transparency 1
                           }
                           shaders DEF PulsingShader PackagedShader {
                              inputOnly SFFloat set_fraction
                              language "MSL"
                              url "data:x-shader/x-metal,
      #include <metal_stdlib>

      using namespace metal;

      struct x3d_VertexOut
      {
         float4 texCoord;
         float4 position [[position]];
      };

      vertex
      x3d_VertexOut
      vertexShader (const unsigned int vertexId         [[ vertex_id  ]],
                    const device x3d_VertexIn* vertices [[ buffer (0) ]],
                    constant x3d_Uniforms & uniforms    [[ buffer (1) ]])
      {
         x3d_VertexIn  in  = vertices [vertexId];
         x3d_VertexOut out = x3d_VertexOut ();
         
         out .texCoord = uniforms .textureMatrices [0] * in .texCoords [0];
         out .position = uniforms .projectionMatrix * uniforms .modelViewMatrix * in .point;
         
         return out;
      }

      constant float pi = 3.1415926535897932384626433832795;
      constant float fraction [[ function_constant (0) ]];

      fragment
      float4
      fragmentShader (const x3d_VertexOut in [[ stage_in ]])
      {
         const auto color    = float3 (0.7, 0.8, 1);
         const auto texCoord = in .texCoord .xy / in .texCoord .w;
         const auto distance = length (texCoord * 2 - float2 (1));
         const auto alpha    = pow ((sin ((distance + fraction) * 4 * pi) + 1) / 2, 10);

         return float4 (color, alpha);
      }
      "
                           }
                        }
                        geometry Disk2D {
                           outerRadius 6
                        }
                     }
                  ]
               }
               DEF Line Shape {
                  geometry LineSet {
                     vertexCount 3
                     color Color {
                        color [
                           0 0.5 1,
                           0 0.5 1,
                           0 1 1,
                        ]
                     }
                     coord Coordinate {
                        point [
                           0 0 0,
                           0 0 5,
                           0 0 7,
                        ]
                     }
                  }
               }
            ]
         }
         DEF InfoOverlay Transform {
            scale IS scale
            children [
               DEF InfoSwitch Switch {
                  whichChoice -1
                  children [
                     Transform {
                        translation 0 0 7
                        rotation IS orientation
                        children [
                           Shape {
                              appearance Appearance {
                                 shaders DEF InfoShader PackagedShader {
                                    language "MSL"
                                    url "data:x-shader/x-metal,
#include <metal_stdlib>

using namespace metal;

struct x3d_VertexOut
{
   float4 texCoord;
   float4 position [[position]];
};

vertex
x3d_VertexOut
vertexShader (const unsigned int vertexId         [[ vertex_id  ]],
              const device x3d_VertexIn* vertices [[ buffer (0) ]],
              constant x3d_Uniforms & uniforms    [[ buffer (1) ]])
{
   x3d_VertexIn  in  = vertices [vertexId];
   x3d_VertexOut out = x3d_VertexOut ();
   
   out .texCoord = uniforms .textureMatrices [0] * in .texCoords [0];
   out .position = uniforms .projectionMatrix * uniforms .modelViewMatrix * in .point;
   
   out .position .z = 0;
   
   return out;
}

fragment
float4
fragmentShader (const x3d_VertexOut in           [[ stage_in ]],
                constant x3d_Uniforms & uniforms [[ buffer (1) ]],
                const texture2d <float> texture0 [[ texture (0) ]],
                const sampler sampler0           [[ sampler (0) ]])
{
   const auto color = texture0 .sample (sampler0, in .texCoord .xy / in .texCoord .w);

   return color;
}
"
                                 }
                              }
                              geometry Text {
                                 string IS city
                                 fontStyle ScreenFontStyle {
                                    pointSize 12
                                 }
                              }
                           }
                        ]
                     }
                  ]
               }
            ]
         }
      ]
   }
   
   DEF PulsingTimer TimeSensor {
      enabled IS animate
      cycleInterval 1.4
      loop TRUE
   }
   
   DEF LocationScript Script {
      inputOnly      SFBool  set_over
      inputOutput    SFBool  animate IS animate
      inputOutput    SFFloat latitude IS latitude
      inputOutput    SFFloat longitude IS longitude
      initializeOnly SFNode  transform USE Transform
      initializeOnly SFNode  point USE PulsingPoint
      initializeOnly SFNode  info USE InfoSwitch

      url "ecmascript:
function initialize ()
{
   set_animate (animate, 0);
   set_position ();
}

function set_over (value, time)
{
   info .whichChoice = value - 1;
}

function set_animate (value, time)
{
   point .whichChoice = value - 1;
}

function set_latitude (value, time)
{
   set_position ();
}

function set_longitude (value, time)
{
   set_position ();
}

function set_position ()
{
   const zAxis    = new SFVec3f (0, 0, 1);
   const position = getPosition (latitude, longitude);

   transform .translation = position;
   transform .rotation    = new SFRotation (zAxis, position);
}

function getPosition (latitude, longitude)
{
   var cosLat = Math.cos (latitude  * Math .PI / 180);
   var sinLat = Math.sin (latitude  * Math .PI / 180);
   var cosLon = Math.cos (longitude * Math .PI / 180);
   var sinLon = Math.sin (longitude * Math .PI / 180);

   return new SFVec3f (cosLat * sinLon, sinLat, cosLat * cosLon);
}
"
   }
   
   ROUTE Transform.translation_changed TO InfoOverlay.set_translation
   ROUTE Touch.isOver TO LocationScript.set_over
   ROUTE PulsingTimer.fraction_changed TO PulsingShader.set_fraction
}

PROTO Route [
   inputOutput SFNode fromLocation NULL
   inputOutput SFNode toLocation NULL
   inputOutput SFTime addTime 0
   inputOutput SFTime removeTime 0
   outputOnly  SFTime addedTime
   outputOnly  SFTime removedTime
]
{
   Shape {
      appearance Appearance {
         material DEF Material Material {
            emissiveColor 1 0.4 1
         }
         shaders DEF RouteShader PackagedShader {
            inputOnly   SFFloat set_fraction
            inputOutput SFBool  add TRUE
            language "MSL"
            
            url "data:x-shader/x-metal,
#include <metal_stdlib>

using namespace metal;

struct x3d_VertexOut
{
   float  fogDepth;
   float4 position [[position]];
};

vertex
x3d_VertexOut
vertexShader (const unsigned int vertexId         [[ vertex_id  ]],
              const device x3d_VertexIn* vertices [[ buffer (0) ]],
              constant x3d_Uniforms & uniforms    [[ buffer (1) ]])
{
   x3d_VertexIn  in  = vertices [vertexId];
   x3d_VertexOut out = x3d_VertexOut ();
   
   out .fogDepth = in .fogDepth;
   out .position = uniforms .projectionMatrix * uniforms .modelViewMatrix * in .point;
   
   return out;
}

constant float fraction [[ function_constant (0) ]];
constant bool  add      [[ function_constant (1) ]];

fragment
float4
fragmentShader (const x3d_VertexOut in           [[ stage_in ]],
                constant x3d_Uniforms & uniforms [[ buffer (1) ]])
{
   const auto color  = uniforms .frontMaterial .emissiveColor;
   
   const auto discard1 = in .fogDepth < fraction ? false : true;
   const auto discard2 = in .fogDepth < fraction ? true  : false;

   if (add ? discard1 : discard2)
      discard_fragment ();

   return float4 (color, 1);
}
"
         }
      }
      geometry DEF Lines LineSet {
         vertexCount 30
         fogCoord FogCoordinate { }
         coord Coordinate { }
      }
   }
   
   DEF Timer TimeSensor {
      cycleInterval 1
   }
   
   Script {
      inputOutput    SFNode  fromLocation IS fromLocation
      inputOutput    SFNode  toLocation IS toLocation
      inputOutput    SFInt32 vertexCount 30
      initializeOnly SFNode  lines USE Lines

      url "ecmascript:
function initialize ()
{
   eventsProcessed ();
}

function eventsProcessed ()
{
   const depth = lines .fogCoord .depth;
   const point = lines .coord .point;

   depth .length = vertexCount;
   point .length = vertexCount;
   
   lines .vertexCount = vertexCount;
   
   var fLat = fromLocation .latitude;
   var fLon = fromLocation .longitude;
   var tLat = toLocation .latitude;
   var tLon = toLocation .longitude;
   
   if (tLon - fLon > 180) fLon += 360;

   for (var i = 0; i < vertexCount; ++ i)
   {
      var t   = i / (vertexCount - 1);
      var lat = lerp (fLat, tLat, t);
      var lon = lerp (fLon, tLon, t);
      var pos = getPosition (lat, lon);
      var s   = (1 - Math .pow (t * 2 - 1, 2)) * 0.2 + 1;
      
      depth [i] = t;
      point [i] = pos .multiply (s);
   }
}

function getPosition (latitude, longitude)
{
   var cosLat = Math.cos (latitude  * Math .PI / 180);
   var sinLat = Math.sin (latitude  * Math .PI / 180);
   var cosLon = Math.cos (longitude * Math .PI / 180);
   var sinLon = Math.sin (longitude * Math .PI / 180);

   return new SFVec3f (cosLat * sinLon, sinLat, cosLat * cosLon);
}

function lerp (source, destination, t)
{
   return source + t * (destination - source);
}
"
   }

   DEF TimerScript Script {
      inputOnly      SFBool set_active
      inputOutput    SFTime addTime IS addTime
      inputOutput    SFTime removeTime IS removeTime
      outputOnly     SFTime addedTime IS addedTime
      outputOnly     SFTime removedTime IS removedTime
      initializeOnly SFNode timer USE Timer
      initializeOnly SFNode shader USE RouteShader

      url "ecmascript:
function initialize ()
{
   if (addTime == 1)
      set_addTime (0, 0);
}

function set_addTime (value, time)
{
   timer .startTime = time;
   shader .add      = true;
}

function set_removeTime (value, time)
{
   timer .startTime = time;
   shader .add      = false;
}

function set_active (value, time)
{
   if (value) return;
   
   if (shader .add)
      addedTime = time;
   else
      removedTime = time;
}
"
   }
   
   ROUTE Timer.fraction_changed TO RouteShader.set_fraction
   ROUTE Timer.isActive TO TimerScript.set_active
}

PROTO LocationGroup [
   inputOutput MFNode locations [ ]
]
{
   Group {
      children [
         DEF VP1 Viewpoint { }
         DEF VP2 Viewpoint { }
         DEF Proxy ProximitySensor { size -1 -1 -1 }
         DEF Locations Group {
            children IS locations
         }
         DEF Routes Group { }
      ]
   }
   
   Script {
      inputOutput    MFNode locations IS locations
      initializeOnly SFNode vp1 USE VP1
      initializeOnly SFNode vp2 USE VP2
      initializeOnly SFNode proxy USE Proxy
      initializeOnly SFNode routes USE Routes

      url "ecmascript:
function initialize ()
{
   if (locations .length)
      set_locations (locations, 0);
}

function set_locations (value, time)
{
   if (value .length == 0)
   {
      var vp = vp1 .isBound ? vp2 : vp1;
      
      routes .children .length = 0;
      
      vp .position     = new SFVec3f (0, 0, 3);
      vp .orientation  = getOrientation (vp .position, new SFVec3f ());
      vp .set_bind     = true;
   }
   else
   {
      const routesWereEmpty = routes .children .length == 0;
   
      for (var i = 0; i < value .length - 1; ++ i)
         value [i] .animate = false;
         
      for (var i = 0; i < value .length; ++ i)
      {
         Browser .addRoute (proxy, 'orientation_changed', value [i], 'set_orientation');
         
         value [i] .set_orientation = proxy .orientation_changed;
      }

      var current  = value [value .length - 1];
      var position = getPosition (current .latitude, current .longitude);
      var vp       = vp1 .isBound ? vp2 : vp1;
      
      current .animate = true;
      vp .position     = position .multiply (3);
      vp .orientation  = getOrientation (vp .position, new SFVec3f ());
      vp .set_bind     = true;
      
      // Add routes.
      
      if (routes .children .length)
      {
         const first = routes .children [0];
         const last  = routes .children [routes .children .length - 1];
         
         Browser .deleteRoute (last, 'addedTime',   first, 'removeTime');
         Browser .deleteRoute (last, 'removedTime', first, 'addTime');
      
         var previousRoute = last;
      }
      
      for (var i = routes .children .length; i < value .length - 1; ++ i)
      {
         var previousLocation = value [i];
         var currentLocation  = value [i + 1];
         var route            = Browser .currentScene .createProto ('Route');
         
         route .fromLocation = previousLocation;
         route .toLocation   = currentLocation;
         
         routes .children [i] = route;
         
         if (previousRoute)
         {
            Browser .addRoute (previousRoute, 'addedTime',   route, 'addTime');
            Browser .addRoute (previousRoute, 'removedTime', route, 'removeTime');
         }
         
         previousRoute = route;
      }
      
      if (routes .children .length)
      {
         const first = routes .children [0];
         const last  = routes .children [routes .children .length - 1];
         
         Browser .addRoute (last, 'addedTime',   first, 'removeTime');
         Browser .addRoute (last, 'removedTime', first, 'addTime');
      
         if (routesWereEmpty)
         {
            first .addTime = 1;
         }
      }
   }
}

function getPosition (latitude, longitude)
{
   var cosLat = Math.cos (latitude  * Math .PI / 180);
   var sinLat = Math.sin (latitude  * Math .PI / 180);
   var cosLon = Math.cos (longitude * Math .PI / 180);
   var sinLon = Math.sin (longitude * Math .PI / 180);

   return new SFVec3f (cosLat * sinLon, sinLat, cosLat * cosLon);
}

function getOrientation (fromPoint, toPoint)
{
   var yAxis = new SFVec3f (0, 1, 0);
   var zAxis = new SFVec3f (0, 0, 1);

   var direction = fromPoint .subtract (toPoint);
   var rotation  = new SFRotation (zAxis, direction);
   var cameraUp  = rotation .multVec (yAxis);
   var N1        = direction .cross (cameraUp);
   var N2        = direction .cross (yAxis);
   var straight  = new SFRotation (N1, N2);

   return rotation .multiply (straight);
}
"
   }
}

LayerSet {
   order [1, 2]
   activeLayer 2
   layers [
      DEF Background Layer {
         isPickable FALSE
         children [
            NavigationInfo {
               headlight FALSE
               type "EXAMINE"
            }
            Background {
               skyColor 0 0 0.05
            }
            DEF DarkBlue DirectionalLight {
               color 0 0 0.05
               intensity 1
               direction 0 0 -1
            }
            DEF Magenta PointLight {
               color 1 0 1
               intensity 0.4
               location 4 -4 2
            }
            DEF LightBlue PointLight {
               color 0 1 1
               intensity 0.1
               location -6 4 4
            }
            Transform {
               children Shape {
                  appearance Appearance {
                     material Material {
                        diffuseColor 1 1 1
                     }
                  }
                  geometry Rectangle2D {
                     size 1000 1000
                  }
               }
            }
         ]
      }
      DEF Scene Layer {
         children [
            NavigationInfo {
               type "EXAMINE"
               headlight TRUE
               transitionType "LINEAR"
               transitionTime 3
            }
            DEF Initial Viewpoint {
               position 0 0 3
            }
            DEF Earth Inline {
               url "x-earth.x3dv"
            }
            DEF Locations LocationGroup {
               #locations Location {
               #   city "London"
               #}
            }
         ]
      }
   ]
}

DEF EnterWorldScript Script {
  url "ecmascript:
function initialize ()
{
   Browser .setBrowserOption (\"Shading\",          \"PHONG\");
   Browser .setBrowserOption (\"PrimitiveQuality\", \"HIGH\");
}
"
}
